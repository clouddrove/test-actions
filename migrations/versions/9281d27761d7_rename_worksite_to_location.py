"""Rename worksite to location

Revision ID: 9281d27761d7
Revises: 8b0b2fc65ded
Create Date: 2023-03-23 11:06:57.885233

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '9281d27761d7'
down_revision = '8b0b2fc65ded'
branch_labels = None
depends_on = None


# def upgrade():
#     ### commands auto generated by Alembic - please adjust! ###
#     op.create_table('location',
#     sa.Column('ext_ref', sa.String(), server_default='', nullable=True),
#     sa.Column('created_uid', sa.Integer(), server_default='1', nullable=True),
#     sa.Column('created_date', sa.DateTime(timezone=True),
#               server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
#     sa.Column('modified_uid', sa.Integer(), server_default='1', nullable=True),
#     sa.Column('modified_date', sa.DateTime(timezone=True),
#               server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
#     sa.Column('id', sa.Integer(), nullable=False),
#     sa.Column('client_id', sa.Integer(), nullable=True),
#     sa.Column('name', sa.String(), nullable=True),
#     sa.Column('description', sa.String(), nullable=True),
#     sa.Column('street', sa.String(), nullable=True),
#     sa.Column('city', sa.String(), nullable=True),
#     sa.Column('state', sa.String(), nullable=True),
#     sa.Column('zip', sa.String(), nullable=True),
#     sa.Column('country', sa.String(), nullable=True),
#     sa.ForeignKeyConstraint(['client_id'], ['client.id'], name=op.f('fk_location_client_id_client')),
#     sa.PrimaryKeyConstraint('id', name=op.f('pk_location')),
#     sa.UniqueConstraint('client_id', 'name', name=op.f('uq_location_client_id'))
#     )
#
#     op.drop_table('worksite')
#
#     with op.batch_alter_table('requisition', schema=None) as batch_op:
#         batch_op.drop_constraint('fk_requisition_worksite_id_worksite', type_='foreignkey')
#         batch_op.add_column(sa.Column('location_id', sa.Integer(), nullable=True))
#         batch_op.drop_column('worksite_id')
#         batch_op.create_foreign_key(batch_op.f('fk_requisition_location_id_location'), 'location', ['location_id'], ['id'])
#     # ### end Alembic commands ###
#
#
# def downgrade():
#     # ### commands auto generated by Alembic - please adjust! ###
#     with op.batch_alter_table('requisition', schema=None) as batch_op:
#         batch_op.drop_constraint(batch_op.f('fk_requisition_location_id_location'), type_='foreignkey')
#         batch_op.add_column(sa.Column('worksite_id', sa.INTEGER(), nullable=True))
#         batch_op.drop_column('location_id')
#         batch_op.create_foreign_key(batch_op.f('fk_requisition_worksite_id_worksite'), 'worksite', ['worksite_id'], ['id'])
#
#     op.create_table('worksite',
#     sa.Column('ext_ref', sa.VARCHAR(), server_default=sa.text("('')"), nullable=True),
#     sa.Column('created_uid', sa.INTEGER(), server_default=sa.text("'1'"), nullable=True),
#     sa.Column('created_date', sa.DATETIME(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
#     sa.Column('modified_uid', sa.INTEGER(), server_default=sa.text("'1'"), nullable=True),
#     sa.Column('modified_date', sa.DATETIME(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
#     sa.Column('id', sa.INTEGER(), nullable=False),
#     sa.Column('client_id', sa.INTEGER(), nullable=True),
#     sa.Column('name', sa.VARCHAR(), nullable=True),
#     sa.Column('description', sa.VARCHAR(), nullable=True),
#     sa.Column('street', sa.VARCHAR(), nullable=True),
#     sa.Column('city', sa.VARCHAR(), nullable=True),
#     sa.Column('state', sa.VARCHAR(), nullable=True),
#     sa.Column('zip', sa.VARCHAR(), nullable=True),
#     sa.Column('country', sa.VARCHAR(), nullable=True),
#     sa.ForeignKeyConstraint(['client_id'], ['client.id'], name='fk_worksite_client_id_client'),
#     sa.PrimaryKeyConstraint('id', name='pk_worksite'),
#     sa.UniqueConstraint('client_id', 'name', name='uq_worksite_client_id')
#     )
#     op.drop_table('location')
#     # ### end Alembic commands ###


def upgrade():
    """
    Original alembic commands are commented out above. The appropriate rename
    steps follow.
    """
    op.rename_table('worksite', 'location')

    with op.batch_alter_table('requisition', schema=None) as batch_op:
        batch_op.drop_constraint('fk_requisition_worksite_id_worksite', type_='foreignkey')
        batch_op.alter_column('worksite_id', new_column_name='location_id')

    with op.batch_alter_table('location', schema=None) as batch_op:
        # Drop 'worksite' labeled constraints
        batch_op.drop_constraint('uq_worksite_client_id', type_='unique')
        batch_op.drop_constraint('fk_worksite_client_id_client', type_='foreignkey')
        batch_op.drop_constraint('pk_worksite', type_='primary')

        # Create 'location' labeled constraints
        batch_op.create_primary_key(batch_op.f('pk_location'), ['id'])
        batch_op.create_unique_constraint(
            batch_op.f('uq_location_client_id'),
            ['client_id', 'name']
        )
        batch_op.create_foreign_key(
            batch_op.f('fk_location_client_id_client'),
            'client', ['client_id'], ['id'])

    with op.batch_alter_table('requisition', schema=None) as batch_op:
        batch_op.create_foreign_key(
            batch_op.f('fk_requisition_location_id_location'),
            'location', ['location_id'], ['id'])

    bind = op.get_bind()
    if bind.engine.name == 'postgresql':
        op.execute("ALTER SEQUENCE worksite_id_seq RENAME TO location_id_seq")


def downgrade():
    with op.batch_alter_table('requisition', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('fk_requisition_location_id_location'), type_='foreignkey')

        # batch_op.add_column(sa.Column('worksite_id', sa.INTEGER(), nullable=True))
        # batch_op.drop_column('location_id')
        batch_op.alter_column('location_id', new_column_name='worksite_id')

    op.rename_table('location', 'worksite')

    with op.batch_alter_table('worksite', schema=None) as batch_op:
        # Drop 'location' labeled constraints
        batch_op.drop_constraint('uq_location_client_id', type_='unique')
        batch_op.drop_constraint('fk_location_client_id_client', type_='foreignkey')
        batch_op.drop_constraint('pk_location', type_='primary')

        # Create 'worksite' labeled constraints
        batch_op.create_primary_key(batch_op.f('pk_worksite'), ['id'])
        batch_op.create_unique_constraint(
            batch_op.f('uq_worksite_client_id'),
            ['client_id', 'name']
        )
        batch_op.create_foreign_key(
            batch_op.f('fk_worksite_client_id_client'),
            'client', ['client_id'], ['id'])

    with op.batch_alter_table('requisition', schema=None) as batch_op:
        batch_op.create_foreign_key(
            batch_op.f('fk_requisition_worksite_id_worksite'),
            'worksite', ['worksite_id'], ['id'])

    bind = op.get_bind()
    if bind.engine.name == 'postgresql':
        op.execute("ALTER SEQUENCE location_id_seq RENAME TO worksite_id_seq")
