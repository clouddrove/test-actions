@startuml

actor User as user
participant "ReachTalent Vue.js" as frontend
participant "ReachTalent Flask API" as backend
database "Database" as db
participant "Email Relay" as smtp

user -> frontend: GET /forgot_password
|||
frontend --> user: render Forgot Password Form
note right: form fields:\n\
 - email\n\

user -> frontend: fills in form fields
opt
frontend -> frontend: validates form fields onchange
note right: notes:\n\
 - email matches naive email regex ^\w+@\w+\..*$\n\

  frontend --> user: render frontend field errors
end

user -> frontend: clicks submit

group Send Forgot Password Email
  frontend -> backend: POST /api/auth/forgot_password/send\n\
{email}

      group If Any Field is Invalid
        backend --> frontend: HTTP 400\n\
    {\n\
      "code": 400\n\
      "name": "Invalid Request"\n\
      "errors": {\n\
        "name": ["Missing field is required."],\n\
        "<field_name>": [<error string 1>, <error string 2>]\n\
      }\n\
    }
      note right: TODO: Implement Anti-CSRF\n\
    This may be resolved with the use of\n\
    reCAPTCHA, which should be added\n\
    anyways to prevent login abuse.
    frontend --> user: render error for each error\n\
    to corresponding field
      end

      group Reveal Nothing Response
        else user record does not exist for email


        else success
          backend -> smtp: send password reset message
          note right: "Hello <User Full Name>,\n\
    We received a request to reset your password. Please click the \n\
    following link to set a new password:\n\
    https://reachtalent.com/reset_password?token=<JWT token>"\n\n\
    JWT Token Payload contains:\n\
    {\n\
      "use": "passreset",\n\
      "exp": <current timestamp + 24 hours>,\n\
      "sub": <user.id>,\n\
      "rti": {\n\
        "email": <user.email>\n\
      },\n\
    }
    else finally
        backend --> frontend: HTTP 200\n{}
        frontend --> user: Render "Forgot Password Request Received" banner
        note right: Banner "Forgot Password Request Received"\n\
    Sub Header: "We received your request, if the \n\
    account exists you will receive an email\n\
    with a link to reset your password"\n\
    end
  end
end


group Reset Password
    user -> frontend: GET /reset_password?token=<JWT Token from email>
    frontend->frontend: Verify Token
    note right: Minimal Validation:\n\
    - token "exp" is not expired\n\
    - token "use" is "passreset"
    opt Token Invalid/Expired
    frontend --> user: Render Forgot Password Form\n\
Banner "Token Expired or Invalid"
    end
    frontend --> user: Render Password Reset Form
    note right: form fields:\n\
    - new password\n\
    - verify new password\n\
    - [Hidden] JWT token from query string

    frontend -> backend: POST /api/auth/forgot_password/reset\n\
{\n\
  "password": "<user submitted password",\n\
  "token": <JWT Token from query string>\n\
}
    group Failures

      alt input errors
        backend --> frontend: HTTP 400\n\
    {\n\
      "code": 400\n\
      "name": "Invalid Request"\n\
      "errors": {\n\
        "name": ["Missing field is required."],\n\
        "<field_name>": [<error string 1>, <error string 2>]\n\
      }\n\
    }
      else user does not exist
        backend -> db: get user by email
        return (no record)
        backend --> frontend: HTTP 400\n\
{\n\
    "code": 400\n\
    "name": "Invalid Request"\n\
    "description": "Unable to reset password."\n\
}
      else user id does not match token
        backend -> db: get user by email
        return
        backend->backend: compare user record id with sub in token
        backend --> frontend: HTTP 400\n\
{\n\
    "code": 400\n\
    "name": "Invalid Request"\n\
    "description": "Unable to reset password."\n\
}
      end
    frontend --> user: Render Generic Error, render "Forgot Password form"
  end

  group Password Reset Success
    backend -> db: get user record
    return
    backend -> db: set user.password = bcrypt_hash(password)
    backend --> frontend: HTTP 200\n{}
    frontend -> user: Banner "Password Successfully Reset!"
  end

end

@enduml